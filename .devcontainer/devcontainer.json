{
  "name": "Portfolio",
  "dockerComposeFile": "compose.yml",
  "service": "workspace",
  "workspaceFolder": "/workspace",
  // * Use 'forwardPorts' to make a list of ports inside the container available locally.
  "forwardPorts": [3000],
  // * Comment out connect as root instead.
  // * More info: https://aka.ms/vscode-remote/containers/non-root.
  "remoteUser": "node",
  "features": {
    "docker-from-docker": "latest",
    "git": "latest"
  },
  "customizations": {
    "vscode": {
      "settings": {
        "terminal.integrated.defaultProfile.linux": "zsh",
        "files.watcherExclude": {
          "**/node_modules/**": true
        },
        // * For Linter and Formatter
        "editor.codeActionsOnSave": ["source.addMissingImports", "source.fixAll.eslint"],
        "editor.formatOnSave": true,
        "editor.formatOnPaste": true,
        "editor.formatOnSaveMode": "modificationsIfAvailable",
        "editor.tabSize": 2,
        "eslint.packageManager": "yarn",
        "files.trimFinalNewlines": true,
        "files.trimTrailingWhitespace": true,
        "prettier.printWidth": 100,
        "javascript.preferences.importModuleSpecifierEnding": "minimal",
        "typescript.preferences.importModuleSpecifierEnding": "minimal",
        "[javascript|typescript|typescriptreact|json|jsonc|yaml]": {
          "editor.defaultFormatter": "esbenp.prettier-vscode"
        },
        "[markdown]": {
          "editor.defaultFormatter": "esbenp.prettier-vscode",
          "editor.wordWrap": "on",
          "editor.quickSuggestions": {
            "comments": "off",
            "strings": "off",
            "other": "off"
          },
          "files.trimTrailingWhitespace": false
        }
      },
      "extensions": [
        "streetsidesoftware.code-spell-checker",
        // * Docker
        "ms-azuretools.vscode-docker",
        // * EditorConfig
        "editorconfig.editorconfig",
        // * JavaScript, TypeScript
        "dbaeumer.vscode-eslint",
        "esbenp.prettier-vscode"
      ]
    }
  },
  // * Use `include` in a local `.gitconfig` for the personal secret information.
  "initializeCommand": "cd \"${localWorkspaceFolder}\" && git config --local user.email \"$(git config user.email)\" && git config --local user.name \"$(git config user.name)\" && git config --local user.signingkey \"$(git config user.signingkey)\"",
  // * Use 'postCreateCommand' to run commands after the container is created.
  "postCreateCommand": "sudo chown -R node:node node_modules",
  "postStartCommand": "yarn && yarn prepare"
}
